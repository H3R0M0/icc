# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    commonmark.config:
        renderer:
            block_separator: "\n"
            inner_separator: "\n"
            soft_break: "\n"
        enable_em: true,
        enable_strong: true,
        use_asterisk: true,
        use_underscore: true,
        html_input: 'escape'
        allow_unsafe_links: false

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    _instanceof:
        App\Grouping\GroupingStrategyInterface:
            tags: [ 'app.grouping_strategy' ]
        App\Sorting\SortingStrategyInterface:
            tags: [ 'app.sorting_strategy' ]
        App\Notification\Email\EmailStrategyInterface:
            tags: [ 'app.notifications.email_strategy' ]
        App\Notification\WebPush\PushNotificationStrategyInterface:
            tags: [ 'app.notifications.push_strategy' ]

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Request/Data,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Doctrine\:
        resource: '../src/Doctrine/*Subscriber.php'
        tags: ['doctrine.event_subscriber']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # SESSIONS
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            $pdoOrDsn: '%env(DATABASE_URL)%'

    # SAML
    LightSaml\SpBundle\Security\User\UsernameMapperInterface:
        alias: lightsaml_sp.username_mapper.simple

    SchulIT\CommonBundle\Command\CreateCertificateCommand:
        arguments:
            $types:
                saml:
                    keyFile: '%sp_cert_key%'
                    certFile: '%sp_cert_file%'
                oauth2:
                    keyFile: '%kernel.project_dir%/oauth/oauth.key'
                    certFile: '%kernel.project_dir%/oauth/oauth.pub'

    SchulIT\CommonBundle\EventSubscriber\SamlExceptionSubscriber:
        arguments:
            $retryRoute: 'lightsaml_sp.login'
            $loggedInRoute: 'dashboard'

    # JSON
    App\Request\JsonParamConverter:
        arguments:
            $prefix: 'App\Request\Data'

    JMS\Serializer\SerializationContext:
        calls:
            - [ setSerializeNull, [ true ]]

    JMS\Serializer\ContextFactory\DeserializationContextFactoryInterface:
        alias: 'jms_serializer.configured_deserialization_context_factory'

    # FLYSYSTEM
    App\Filesystem\DocumentFilesystem:
        public: true
        arguments:
            $filesystem: '@oneup_flysystem.documents_filesystem'

    App\Filesystem\MessageFilesystem:
        public: true
        arguments:
            $filesystem: '@oneup_flysystem.messages_filesystem'

    App\Security\ImportUserAuthenticator:
        arguments:
            $presharedKey: '%env(IMPORT_PSK)%'

    # SECURITY
    App\Security\User\UserMapper:
        arguments:
            $typesMap: '%types_map%'

    App\Security\CronUserProvider:
        arguments:
            $username: 'cron'
            $password: '%env(CRON_PASSWORD)%'

    # MENU
    App\Menu\Builder:
        arguments:
            $idpProfileUrl: '%env(IDP_PROFILE_URL)%'
        tags:
            - { name: knp_menu.menu_builder, method: mainMenu, alias: mainMenu }
            - { name: knp_menu.menu_builder, method: userMenu, alias: userMenu }
            - { name: knp_menu.menu_builder, method: adminMenu, alias: adminMenu }
            - { name: knp_menu.menu_builder, method: settingsMenu, alias: settingsMenu }
            - { name: knp_menu.menu_builder, method: servicesMenu, alias: servicesMenu }
            - { name: knp_menu.menu_builder, method: systemMenu, alias: systemMenu }
            - { name: knp_menu.menu_builder, method: notificationsMenu, alias: notificationsMenu }

    SchulIT\CommonBundle\Menu\Voter:
        tags:
            - { name: knp_menu.voter }

    # SERVICES
    App\Sorting\:
        resource: '../src/Sorting/*Strategy.php'

    App\Grouping\:
        resource: '../src/Grouping/*Strategy.php'

    App\Grouping\Grouper:
        arguments:
            - !tagged app.grouping_strategy

    App\Sorting\Sorter:
        arguments:
            - !tagged app.sorting_strategy

    App\Rooms\Status\ServiceCenterRoomStatusHelper:
        arguments:
            $isEnabled: '%env(bool:ROOM_STATUS)%'

    # CONTROLLER
    App\Controller\MarkdownController:
        bind:
            $baseUrl: '%env(APP_URL)%'

    App\Controller\WikiAdminController:
        bind:
            $wikiFilesystem: '@oneup_flysystem.wiki_filesystem'

    # MARKDOWN
    Emojione\Client:
        factory: ['@App\Markdown\EmojiClientFactory', createEmojiClient]
        arguments:
            $baseUrl: '%env(APP_URL)%'

    League\CommonMark\EnvironmentInterface:
        class: League\CommonMark\Environment
        factory: [ 'League\CommonMark\Environment', createCommonMarkEnvironment ]
        calls:
            - [ addExtension, [ "@App\\Markdown\\MarkdownExtension" ]]

    League\CommonMark\CommonMarkConverter:
        class: League\CommonMark\CommonMarkConverter
        arguments:
            $config: "%commonmark.config%"
            $environment: "@League\\CommonMark\\EnvironmentInterface"

    EasySlugger\SluggerInterface:
        class: EasySlugger\Utf8Slugger

    # HELPER
    App\Ics\IcsHelper:
        arguments:
            $appName: '%env(APP_NAME)%'
            $languageCode: '%env(LANGUAGE)%'
            $appUrl: '%env(APP_URL)%'

    Mimey\MimeTypes: ~

    # CONVERTER
    App\Converter\EnumStringConverter:
        bind:
            $enumFormKeyMapping: '%fervo_enum.enum_map%'

    # DOCTRINE:
    Doctrine\Persistence\ManagerRegistry:
        alias: 'doctrine'

    Doctrine\Migrations\Version\DbalMigrationFactory: ~
    App\Migrations\Factory\MigrationFactoryDecorator:
        decorates: Doctrine\Migrations\Version\DbalMigrationFactory
        arguments:
            $migrationFactory: '@App\Migrations\Factory\MigrationFactoryDecorator.inner'

    # DARK MODE:
    SchulIT\CommonBundle\DarkMode\DarkModeManagerInterface:
        class: App\DarkMode\DarkModeManager

    # NOTIFICATIONS
    App\Notification\Email\:
        resource: '../src/Notification/Email/*Strategy.php'

    App\Notification\WebPush\:
        resource: '../src/Notification/WebPush/*Strategy.php'

    App\Notification\NotificationService:
        arguments:
            $emailStrategies: !tagged app.notifications.email_strategy
            $pushStrategies: !tagged app.notifications.push_strategy

    App\Notification\Email\EmailNotificationService:
        arguments:
            $isEnabled: '%env(bool:NOTIFICATIONS_ENABLED)%'
            $appName: '%env(APP_NAME)%'
            $sender: '%env(MAILER_FROM)%'

    App\EventSubscriber\ReservationCheckerSubscriber:
        arguments:
            $appName: '%env(APP_NAME)%'
            $sender: '%env(MAILER_FROM)%'

    # COMMANDS
    SchulIT\CommonBundle\Command\SendMailsCommand:
        arguments:
            $messageLimit: '%env(int:MAILER_LIMIT)%'
        tags:
            - { name: shapecode_cron.cron_job, expression: '*\/2 * * * *' }

    # WEBPUSH
    App\Notification\WebPush\UserSubscriptionManager:
        tags:
            - { name: bentools_webpush.subscription_manager, user_class: 'App\Entity\User' }

    # SICKNOTES
    App\SickNote\SickNoteSender:
        arguments:
            $appName: '%env(APP_NAME)%'
            $sender: '%env(MAILER_FROM)%'